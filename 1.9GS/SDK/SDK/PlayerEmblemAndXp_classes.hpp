#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PlayerEmblemAndXp

#include "Basic.hpp"

#include "FortniteUI_classes.hpp"
#include "Engine_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass PlayerEmblemAndXp.PlayerEmblemAndXp_C
// 0x0090 (0x02F0 - 0x0260)
class UPlayerEmblemAndXp_C final : public UFortAccountWidgetBase
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0260(0x0008)(Transient, DuplicateTransient)
	class UCommonTextBlock*                       Divider;                                           // 0x0268(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           LevelRewardsVB;                                    // 0x0270(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       LevelText;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       NextRewardsText;                                   // 0x0280(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UPlayerRankEmblem_C*                    PlayerRankEmblem;                                  // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Reward1HB;                                         // 0x0290(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortMultiSizeItemCard*                 Reward1Item;                                       // 0x0298(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Reward1LevelText;                                  // 0x02A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Reward1VB;                                         // 0x02A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         Reward2HB;                                         // 0x02B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UFortMultiSizeItemCard*                 Reward2Item;                                       // 0x02B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       Reward2LevelText;                                  // 0x02C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UVerticalBox*                           Reward2VB;                                         // 0x02C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 RewardsDivider;                                    // 0x02D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 XpBar;                                             // 0x02D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XPneeded;                                          // 0x02E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UCommonTextBlock*                       XPOwned;                                           // 0x02E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)

public:
	void ExecuteUbergraph_PlayerEmblemAndXp(int32 EntryPoint);
	void OnAccountInfoChanged(const struct FFortPublicAccountInfo& Result);
	void Construct();
	void Refresh(const struct FFortPublicAccountInfo& FortPublicAccountInfo);
	void SetupReward(class UWidget* Container, class UTextBlock* RewardText, class UFortMultiSizeItemCard* RewardItemCard, bool HasReward, const struct FFortItemInstanceQuantityPair& RewardItem, int32 LevelRewarded);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"PlayerEmblemAndXp_C">();
	}
	static class UPlayerEmblemAndXp_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerEmblemAndXp_C>();
	}
};
static_assert(alignof(UPlayerEmblemAndXp_C) == 0x000008, "Wrong alignment on UPlayerEmblemAndXp_C");
static_assert(sizeof(UPlayerEmblemAndXp_C) == 0x0002F0, "Wrong size on UPlayerEmblemAndXp_C");
static_assert(offsetof(UPlayerEmblemAndXp_C, UberGraphFrame) == 0x000260, "Member 'UPlayerEmblemAndXp_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Divider) == 0x000268, "Member 'UPlayerEmblemAndXp_C::Divider' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, LevelRewardsVB) == 0x000270, "Member 'UPlayerEmblemAndXp_C::LevelRewardsVB' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, LevelText) == 0x000278, "Member 'UPlayerEmblemAndXp_C::LevelText' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, NextRewardsText) == 0x000280, "Member 'UPlayerEmblemAndXp_C::NextRewardsText' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, PlayerRankEmblem) == 0x000288, "Member 'UPlayerEmblemAndXp_C::PlayerRankEmblem' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward1HB) == 0x000290, "Member 'UPlayerEmblemAndXp_C::Reward1HB' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward1Item) == 0x000298, "Member 'UPlayerEmblemAndXp_C::Reward1Item' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward1LevelText) == 0x0002A0, "Member 'UPlayerEmblemAndXp_C::Reward1LevelText' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward1VB) == 0x0002A8, "Member 'UPlayerEmblemAndXp_C::Reward1VB' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward2HB) == 0x0002B0, "Member 'UPlayerEmblemAndXp_C::Reward2HB' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward2Item) == 0x0002B8, "Member 'UPlayerEmblemAndXp_C::Reward2Item' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward2LevelText) == 0x0002C0, "Member 'UPlayerEmblemAndXp_C::Reward2LevelText' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, Reward2VB) == 0x0002C8, "Member 'UPlayerEmblemAndXp_C::Reward2VB' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, RewardsDivider) == 0x0002D0, "Member 'UPlayerEmblemAndXp_C::RewardsDivider' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, XpBar) == 0x0002D8, "Member 'UPlayerEmblemAndXp_C::XpBar' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, XPneeded) == 0x0002E0, "Member 'UPlayerEmblemAndXp_C::XPneeded' has a wrong offset!");
static_assert(offsetof(UPlayerEmblemAndXp_C, XPOwned) == 0x0002E8, "Member 'UPlayerEmblemAndXp_C::XPOwned' has a wrong offset!");

}

